{"ast":null,"code":"var _jsxFileName = \"F:\\\\Works\\\\Formation OC\\\\SOUTENANCES\\\\P7\\\\groupomania\\\\client\\\\src\\\\App.js\";\n// import logo from \"./logo.svg\";\n// import \"./sass/App.scss\";\n// import React, { useState, Suspense, lazy } from \"react\";\n// import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport { Routes, Route, BrowserRouter } from \"react-router-dom\";\nimport { Navigation, Footer, Login, Home, User_profile } from \"./webpages\"; // Tutoriel Private Routes react\n// import Loader from \"shareComponent/Loader\";\n\nimport ProtectedRoutes from \"./routes/ProtectedRoutes\"; //Authenticated routes\n\nimport PublicRoute from \"./routes/PublicRoute\";\nimport PrivateRoute from \"./routes/PrivateRoute\"; // const LoginPage = lazy(() => import(\"./webpages/Login\"));\n// const Register = lazy(() => import(\"components/Register\"));\n// const ForgotPassword = lazy(() => import(\"components/ForgotPassword\"));\n// const NoFoundComponent = lazy(() => import(\"components/NoFoundComponent\"));\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // let isLoggedIn = localStorage.getItem(\"user_id\");\n  // // console.log(isLoggedIn);\n  // const UserContext = React.createContext(\"user_logged_in\");\n  // if (!isLoggedIn) {\n  //     return (\n  //         <div className=\"App\">\n  //             <div className=\"App__bgColor\"></div>\n  //             <Router>\n  //                 <Login />\n  //             </Router>\n  //         </div>\n  //     );\n  // }\n  function getToken() {\n    return localStorage.getItem(\"user_token\");\n  }\n\n  const isAuthenticated = getToken();\n  return (\n    /*#__PURE__*/\n    // <UserContext.Provider value=\"user_not_logged_in\"></UserContext.Provider>\n    // <div className=\"App\">\n    //     <div className=\"App__bgColor\"></div>\n    //     <Router>\n    //         {/* <Login /> */}\n    //         <header className=\"App-header\">\n    //             <Navigation isLoggedIn={isLoggedIn} />\n    //         </header>\n    //         <Routes>\n    //             <Route path=\"/Home\" element={<Home isLoggedIn={isLoggedIn} />} />\n    //             <Route path=\"/User_profile\" element={<User_profile isLoggedIn={isLoggedIn} />} />\n    //         </Routes>\n    //         <Footer />\n    //     </Router>\n    // </div>\n    // const [isAuthenticated, setIsAuthenticated] = useState(false);\n    _jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          isAuthenticated: isAuthenticated,\n          element: Login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          isAuthenticated: isAuthenticated,\n          element: Home\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) // <Router>\n    //     {/* <Suspense fallback={<Loader />}> */}\n    //     <Suspense>\n    //         <Routes>\n    //             <PrivateRoute path=\"/Home\" is isAuthenticated={isAuthenticated} component={Home} exact={true} />\n    //             <PublicRoute path=\"/\" isAuthenticated={isAuthenticated} component={Login} exact={true} />\n    //             {/* <Login /> */}\n    //             {/* </PublicRoute> */}\n    //             {/* <PublicRoute path=\"/register\" isAuthenticated={isAuthenticated}>\n    //                 <Register />\n    //             </PublicRoute> */}\n    //             {/* <PublicRoute path=\"/forgot-password\" isAuthenticated={isAuthenticated}>\n    //                 <ForgotPassword />\n    //             </PublicRoute> */}\n    //             {/* <PrivateRoute path=\"/\" isAuthenticated={isAuthenticated}>\n    //                 <ProtectedRoutes />\n    //             </PrivateRoute> */}\n    //             {/* <Route path=\"*\">\n    //                 <NoFoundComponent />\n    //             </Route> */}\n    //         </Routes>\n    //     </Suspense>\n    // </Router>\n\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Routes","Route","BrowserRouter","Navigation","Footer","Login","Home","User_profile","ProtectedRoutes","PublicRoute","PrivateRoute","App","getToken","localStorage","getItem","isAuthenticated"],"sources":["F:/Works/Formation OC/SOUTENANCES/P7/groupomania/client/src/App.js"],"sourcesContent":["// import logo from \"./logo.svg\";\n// import \"./sass/App.scss\";\n// import React, { useState, Suspense, lazy } from \"react\";\n// import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n\nimport React, { useState } from \"react\";\nimport { Routes, Route, BrowserRouter } from \"react-router-dom\";\nimport { Navigation, Footer, Login, Home, User_profile } from \"./webpages\";\n\n// Tutoriel Private Routes react\n// import Loader from \"shareComponent/Loader\";\nimport ProtectedRoutes from \"./routes/ProtectedRoutes\"; //Authenticated routes\nimport PublicRoute from \"./routes/PublicRoute\";\nimport PrivateRoute from \"./routes/PrivateRoute\";\n\n// const LoginPage = lazy(() => import(\"./webpages/Login\"));\n// const Register = lazy(() => import(\"components/Register\"));\n// const ForgotPassword = lazy(() => import(\"components/ForgotPassword\"));\n// const NoFoundComponent = lazy(() => import(\"components/NoFoundComponent\"));\n\nfunction App() {\n    // let isLoggedIn = localStorage.getItem(\"user_id\");\n    // // console.log(isLoggedIn);\n\n    // const UserContext = React.createContext(\"user_logged_in\");\n\n    // if (!isLoggedIn) {\n    //     return (\n    //         <div className=\"App\">\n    //             <div className=\"App__bgColor\"></div>\n    //             <Router>\n    //                 <Login />\n    //             </Router>\n    //         </div>\n    //     );\n    // }\n\n    function getToken() {\n        return localStorage.getItem(\"user_token\");\n    }\n\n    const isAuthenticated = getToken();\n\n    return (\n        // <UserContext.Provider value=\"user_not_logged_in\"></UserContext.Provider>\n        // <div className=\"App\">\n        //     <div className=\"App__bgColor\"></div>\n        //     <Router>\n        //         {/* <Login /> */}\n        //         <header className=\"App-header\">\n        //             <Navigation isLoggedIn={isLoggedIn} />\n        //         </header>\n        //         <Routes>\n        //             <Route path=\"/Home\" element={<Home isLoggedIn={isLoggedIn} />} />\n        //             <Route path=\"/User_profile\" element={<User_profile isLoggedIn={isLoggedIn} />} />\n        //         </Routes>\n        //         <Footer />\n        //     </Router>\n        // </div>\n\n        // const [isAuthenticated, setIsAuthenticated] = useState(false);\n        <BrowserRouter>\n            <Routes>\n                <Route path=\"/\" isAuthenticated={isAuthenticated} element={Login} />\n                <Route path=\"/home\" isAuthenticated={isAuthenticated} element={Home} />\n                {/* <PublicRoute path=\"/signup\" isAuthenticated={isAuthenticated} component={Signup} exact={true} /> */}\n            </Routes>\n        </BrowserRouter>\n        // <Router>\n        //     {/* <Suspense fallback={<Loader />}> */}\n        //     <Suspense>\n        //         <Routes>\n        //             <PrivateRoute path=\"/Home\" is isAuthenticated={isAuthenticated} component={Home} exact={true} />\n        //             <PublicRoute path=\"/\" isAuthenticated={isAuthenticated} component={Login} exact={true} />\n        //             {/* <Login /> */}\n        //             {/* </PublicRoute> */}\n        //             {/* <PublicRoute path=\"/register\" isAuthenticated={isAuthenticated}>\n        //                 <Register />\n        //             </PublicRoute> */}\n        //             {/* <PublicRoute path=\"/forgot-password\" isAuthenticated={isAuthenticated}>\n        //                 <ForgotPassword />\n        //             </PublicRoute> */}\n        //             {/* <PrivateRoute path=\"/\" isAuthenticated={isAuthenticated}>\n        //                 <ProtectedRoutes />\n        //             </PrivateRoute> */}\n        //             {/* <Route path=\"*\">\n        //                 <NoFoundComponent />\n        //             </Route> */}\n        //         </Routes>\n        //     </Suspense>\n        // </Router>\n    );\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,YAA1C,QAA8D,YAA9D,C,CAEA;AACA;;AACA,OAAOC,eAAP,MAA4B,0BAA5B,C,CAAwD;;AACxD,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;AACA;AACA;AACA;;;;AAEA,SAASC,GAAT,GAAe;EACX;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,SAASC,QAAT,GAAoB;IAChB,OAAOC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAP;EACH;;EAED,MAAMC,eAAe,GAAGH,QAAQ,EAAhC;EAEA;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,QAAC,aAAD;MAAA,uBACI,QAAC,MAAD;QAAA,wBACI,QAAC,KAAD;UAAO,IAAI,EAAC,GAAZ;UAAgB,eAAe,EAAEG,eAAjC;UAAkD,OAAO,EAAEV;QAA3D;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,KAAD;UAAO,IAAI,EAAC,OAAZ;UAAoB,eAAe,EAAEU,eAArC;UAAsD,OAAO,EAAET;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAlBJ,CAyBI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EA/CJ;AAiDH;;KAxEQK,G;AA0ET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}