{"ast":null,"code":"var _jsxFileName = \"F:\\\\Works\\\\Formation OC\\\\SOUTENANCES\\\\P7\\\\groupomania\\\\client\\\\src\\\\components\\\\Comments.js\";\nimport React, { Component } from \"react\"; // import React, { useState, useEffect } from \"react\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Comments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      comments: [],\n      message: \"\",\n      DataIsLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\n    const token = user.pass; // ID du post\n    // console.log(this.props.post_id);\n\n    const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\n    const reqOptions = {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await fetch(url, reqOptions);\n      const data = await res.json(); // console.log(data);\n\n      if (!data.allComments) {\n        // console.log(\"NO COMMENT\");\n        this.setState({\n          message: \"Aucun commentaire\",\n          DataIsLoaded: false\n        });\n      } else {\n        // console.log(data.allComments);\n        this.setState({\n          comments: data.allComments,\n          DataIsLoaded: true\n        });\n      }\n\n      console.log(this.state); // this.setState({ comments: data.allComments, DataIsLoaded: true });\n      // console.log(this.state);\n      // console.log(data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const {\n      DataIsLoaded,\n      comments\n    } = this.state;\n    if (!DataIsLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Pleses wait some time.... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this);\n    console.log(comments); // const showComments = comments.map((comment) => {\n    //     // return <div key={comment.id}>HELLO</div>;\n    // });\n\n    return;\n  }\n\n} // function Comments(props) {\n//     const { post_id } = props;\n//     const [msg, setMsg] = useState(\"\");\n//     const [comments, setComments] = useState({ comments: {} });\n//     const [dataIsLoaded, setDataIsLoaded] = useState(false);\n//     const [show, setShow] = useState(false);\n//     // Token de l'utilisateur\n//     const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\n//     const token = user.pass;\n//     const user_id = user.id;\n//     // Request Options\n//     const url = `http://localhost:8080/api/articles/${post_id}/comments`;\n//     const reqOptions = {\n//         method: \"GET\",\n//         headers: {\n//             Authorization: `Bearer ${token}`,\n//             Accept: \"application/json\",\n//             \"Content-Type\": \"application/json\",\n//         },\n//     };\n//     const fetchComments = () => {\n//         fetch(url, reqOptions)\n//             .then((res) => {\n//                 if (res.ok) {\n//                     return res.json();\n//                 }\n//             })\n//             .then((data) => {\n//                 // console.log(data);\n//                 if (!data) {\n//                     setMsg(\"Aucun commentaire\");\n//                     // console.log(msg);\n//                 }\n//                 setComments(data);\n//                 setDataIsLoaded(true);\n//             })\n//             .catch((err) => {\n//                 console.log(err);\n//             });\n//     };\n//     useEffect(() => {\n//         fetchComments();\n//     }, []);\n//     if (!dataIsLoaded)\n//         return (\n//             <div>\n//                 <h1> {msg} </h1>\n//             </div>\n//         );\n//     // if (comments.allComments == undefined) {\n//     //     console.log(\"pas de commentaire\");\n//     // }\n//     const handleClick = (e) => {\n//         // e.preventDefault();\n//         setShow(true);\n//         // showComments();\n//     };\n//     const test =\n//     return <div>{!comments.allComments ? \"Pas de commentaires à afficher\" : \"fuck toi\"}</div>;\n// }\n// export default Comments;","map":{"version":3,"names":["React","Component","Comments","constructor","props","state","comments","message","DataIsLoaded","componentDidMount","user","JSON","parse","sessionStorage","getItem","token","pass","url","post_id","reqOptions","method","headers","Authorization","Accept","res","fetch","data","json","allComments","setState","console","log","err","render"],"sources":["F:/Works/Formation OC/SOUTENANCES/P7/groupomania/client/src/components/Comments.js"],"sourcesContent":["import React, { Component } from \"react\";\r\n// import React, { useState, useEffect } from \"react\";\r\n\r\nexport default class Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            comments: [],\r\n            message: \"\",\r\n            DataIsLoaded: false,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\r\n        const token = user.pass;\r\n\r\n        // ID du post\r\n        // console.log(this.props.post_id);\r\n\r\n        const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\r\n        const reqOptions = {\r\n            method: \"GET\",\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        };\r\n\r\n        try {\r\n            const res = await fetch(url, reqOptions);\r\n            const data = await res.json();\r\n\r\n            // console.log(data);\r\n\r\n            if (!data.allComments) {\r\n                // console.log(\"NO COMMENT\");\r\n                this.setState({ message: \"Aucun commentaire\", DataIsLoaded: false });\r\n            } else {\r\n                // console.log(data.allComments);\r\n                this.setState({ comments: data.allComments, DataIsLoaded: true });\r\n            }\r\n            console.log(this.state);\r\n\r\n            // this.setState({ comments: data.allComments, DataIsLoaded: true });\r\n            // console.log(this.state);\r\n            // console.log(data);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { DataIsLoaded, comments } = this.state;\r\n\r\n        if (!DataIsLoaded)\r\n            return (\r\n                <div>\r\n                    <h1> Pleses wait some time.... </h1>\r\n                </div>\r\n            );\r\n\r\n        console.log(comments);\r\n\r\n        // const showComments = comments.map((comment) => {\r\n        //     // return <div key={comment.id}>HELLO</div>;\r\n        // });\r\n\r\n        return;\r\n    }\r\n}\r\n// function Comments(props) {\r\n//     const { post_id } = props;\r\n//     const [msg, setMsg] = useState(\"\");\r\n//     const [comments, setComments] = useState({ comments: {} });\r\n//     const [dataIsLoaded, setDataIsLoaded] = useState(false);\r\n\r\n//     const [show, setShow] = useState(false);\r\n\r\n//     // Token de l'utilisateur\r\n//     const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\r\n//     const token = user.pass;\r\n//     const user_id = user.id;\r\n\r\n//     // Request Options\r\n//     const url = `http://localhost:8080/api/articles/${post_id}/comments`;\r\n//     const reqOptions = {\r\n//         method: \"GET\",\r\n//         headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//             Accept: \"application/json\",\r\n//             \"Content-Type\": \"application/json\",\r\n//         },\r\n//     };\r\n\r\n//     const fetchComments = () => {\r\n//         fetch(url, reqOptions)\r\n//             .then((res) => {\r\n//                 if (res.ok) {\r\n//                     return res.json();\r\n//                 }\r\n//             })\r\n//             .then((data) => {\r\n//                 // console.log(data);\r\n//                 if (!data) {\r\n//                     setMsg(\"Aucun commentaire\");\r\n//                     // console.log(msg);\r\n//                 }\r\n//                 setComments(data);\r\n//                 setDataIsLoaded(true);\r\n//             })\r\n//             .catch((err) => {\r\n//                 console.log(err);\r\n//             });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         fetchComments();\r\n//     }, []);\r\n\r\n//     if (!dataIsLoaded)\r\n//         return (\r\n//             <div>\r\n//                 <h1> {msg} </h1>\r\n//             </div>\r\n//         );\r\n\r\n//     // if (comments.allComments == undefined) {\r\n//     //     console.log(\"pas de commentaire\");\r\n//     // }\r\n\r\n//     const handleClick = (e) => {\r\n//         // e.preventDefault();\r\n//         setShow(true);\r\n//         // showComments();\r\n//     };\r\n\r\n//     const test =\r\n\r\n//     return <div>{!comments.allComments ? \"Pas de commentaires à afficher\" : \"fuck toi\"}</div>;\r\n// }\r\n\r\n// export default Comments;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;;AAEA,eAAe,MAAMC,QAAN,SAAuBF,KAAK,CAACC,SAA7B,CAAuC;EAClDE,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IAEA,KAAKC,KAAL,GAAa;MACTC,QAAQ,EAAE,EADD;MAETC,OAAO,EAAE,EAFA;MAGTC,YAAY,EAAE;IAHL,CAAb;EAKH;;EAEsB,MAAjBC,iBAAiB,GAAG;IACtB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,gBAAvB,CAAX,CAAb;IACA,MAAMC,KAAK,GAAGL,IAAI,CAACM,IAAnB,CAFsB,CAItB;IACA;;IAEA,MAAMC,GAAG,GAAI,sCAAqC,KAAKb,KAAL,CAAWc,OAAQ,WAArE;IACA,MAAMC,UAAU,GAAG;MACfC,MAAM,EAAE,KADO;MAEfC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASP,KAAM,EAD1B;QAELQ,MAAM,EAAE,kBAFH;QAGL,gBAAgB;MAHX;IAFM,CAAnB;;IASA,IAAI;MACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAME,UAAN,CAAvB;MACA,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB,CAFA,CAIA;;MAEA,IAAI,CAACD,IAAI,CAACE,WAAV,EAAuB;QACnB;QACA,KAAKC,QAAL,CAAc;UAAEtB,OAAO,EAAE,mBAAX;UAAgCC,YAAY,EAAE;QAA9C,CAAd;MACH,CAHD,MAGO;QACH;QACA,KAAKqB,QAAL,CAAc;UAAEvB,QAAQ,EAAEoB,IAAI,CAACE,WAAjB;UAA8BpB,YAAY,EAAE;QAA5C,CAAd;MACH;;MACDsB,OAAO,CAACC,GAAR,CAAY,KAAK1B,KAAjB,EAbA,CAeA;MACA;MACA;IACH,CAlBD,CAkBE,OAAO2B,GAAP,EAAY;MACVF,OAAO,CAACC,GAAR,CAAYC,GAAZ;IACH;EACJ;;EAEDC,MAAM,GAAG;IACL,MAAM;MAAEzB,YAAF;MAAgBF;IAAhB,IAA6B,KAAKD,KAAxC;IAEA,IAAI,CAACG,YAAL,EACI,oBACI;MAAA,uBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;IAMJsB,OAAO,CAACC,GAAR,CAAYzB,QAAZ,EAVK,CAYL;IACA;IACA;;IAEA;EACH;;AApEiD,C,CAsEtD;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module"}