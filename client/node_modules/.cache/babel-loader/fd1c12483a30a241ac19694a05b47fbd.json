{"ast":null,"code":"var _jsxFileName = \"F:\\\\Works\\\\Formation OC\\\\SOUTENANCES\\\\P7\\\\groupomania\\\\client\\\\src\\\\components\\\\Comments.js\",\n    _s = $RefreshSig$();\n\n// CETTE PAGE NE FONCTIONNE PAS !\n// import React from \"react\";\nimport React, { useState, useEffect } from \"react\"; // export default class Comments extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             comments: [],\n//             message: \"\",\n//             DataIsLoaded: false,\n//         };\n//         const handleClick = (e) => {\n//             const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\n//             const token = user.pass;\n//             // ID du post\n//             // console.log(this.props.post_id);\n//             const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\n//             const reqOptions = {\n//                 method: \"GET\",\n//                 headers: {\n//                     Authorization: `Bearer ${token}`,\n//                     Accept: \"application/json\",\n//                     \"Content-Type\": \"application/json\",\n//                 },\n//             };\n//             fetch(url, reqOptions)\n//                 .then((res) => {\n//                     if (res.ok) {\n//                         return res.json();\n//                     }\n//                 })\n//                 .then((data) => {\n//                     console.log(data);\n//                     return handleClick();\n//                 });\n//         };\n//     }\n//     async componentDidMount() {\n//         const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\n//         const token = user.pass;\n//         // ID du post\n//         // console.log(this.props.post_id);\n//         const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\n//         const reqOptions = {\n//             method: \"GET\",\n//             headers: {\n//                 Authorization: `Bearer ${token}`,\n//                 Accept: \"application/json\",\n//                 \"Content-Type\": \"application/json\",\n//             },\n//         };\n//         try {\n//             const res = await fetch(url, reqOptions);\n//             const data = await res.json();\n//             // console.log(data);\n//             if (data.allComments) {\n//                 // console.log(data.allComments);\n//                 this.setState({ comments: data.allComments, message: \"Commentaires chargé\", DataIsLoaded: true });\n//             }\n//             console.log(this.state);\n//             // this.setState({ comments: data.allComments, DataIsLoaded: true });\n//             // console.log(this.state);\n//             // console.log(data);\n//         } catch (err) {\n//             console.log(err);\n//         }\n//     }\n//     render() {\n//         const { DataIsLoaded, comments, message } = this.state;\n//         if (!DataIsLoaded)\n//             return (\n//                 <div>\n//                     <h1> {message} </h1>\n//                 </div>\n//             );\n//         // console.log(comments);\n//         // const showComments = comments.map((comment) => {\n//         //     // return <div key={comment.id}>HELLO</div>;\n//         // });\n//         return <div>{!DataIsLoaded ? \"Pas de commentaires\" : message}</div>;\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Comments(props) {\n  _s();\n\n  var _comments$allComments;\n\n  const {\n    post_id\n  } = props;\n  const [msg, setMsg] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  const [dataIsLoaded, setDataIsLoaded] = useState(false);\n  const [show, setShow] = useState(false); // Token de l'utilisateur\n\n  const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\n  const token = user.pass;\n  const user_id = user.id; // Request Options\n\n  const url = `http://localhost:8080/api/articles/${post_id}/comments`;\n  const reqOptions = {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const fetchComments = () => {\n    fetch(url, reqOptions).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n    }).then(data => {\n      // console.log(data);\n      if (!data) {\n        setMsg(\"Aucun commentaire\"); // console.log(msg);\n      }\n\n      setComments(data);\n      setDataIsLoaded(true);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    fetchComments();\n  }, []);\n  if (!dataIsLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", msg, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 13\n  }, this); // if (comments.allComments == undefined) {\n  //     console.log(\"pas de commentaire\");\n  // }\n\n  console.log(comments);\n  const showComs = (_comments$allComments = comments.allComments) === null || _comments$allComments === void 0 ? void 0 : _comments$allComments.map(comment => {\n    if (comment) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Yes y'a des coms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 20\n      }, this);\n    }\n  });\n\n  const handleClick = e => {\n    setShow(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showComs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 12\n  }, this); // return <div>{!comments ? \"Pas de commentaires à afficher\" : \"fuck toi\"}</div>;\n}\n\n_s(Comments, \"O+q9SdG4ZnydhtOAxxPACQla1nQ=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","Comments","props","post_id","msg","setMsg","comments","setComments","dataIsLoaded","setDataIsLoaded","show","setShow","user","JSON","parse","sessionStorage","getItem","token","pass","user_id","id","url","reqOptions","method","headers","Authorization","Accept","fetchComments","fetch","then","res","ok","json","data","catch","err","console","log","showComs","allComments","map","comment","handleClick","e"],"sources":["F:/Works/Formation OC/SOUTENANCES/P7/groupomania/client/src/components/Comments.js"],"sourcesContent":["// CETTE PAGE NE FONCTIONNE PAS !\r\n\r\n// import React from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// export default class Comments extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             comments: [],\r\n//             message: \"\",\r\n//             DataIsLoaded: false,\r\n//         };\r\n\r\n//         const handleClick = (e) => {\r\n//             const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\r\n//             const token = user.pass;\r\n\r\n//             // ID du post\r\n//             // console.log(this.props.post_id);\r\n\r\n//             const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\r\n//             const reqOptions = {\r\n//                 method: \"GET\",\r\n//                 headers: {\r\n//                     Authorization: `Bearer ${token}`,\r\n//                     Accept: \"application/json\",\r\n//                     \"Content-Type\": \"application/json\",\r\n//                 },\r\n//             };\r\n\r\n//             fetch(url, reqOptions)\r\n//                 .then((res) => {\r\n//                     if (res.ok) {\r\n//                         return res.json();\r\n//                     }\r\n//                 })\r\n//                 .then((data) => {\r\n//                     console.log(data);\r\n//                     return handleClick();\r\n//                 });\r\n//         };\r\n//     }\r\n\r\n//     async componentDidMount() {\r\n//         const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\r\n//         const token = user.pass;\r\n\r\n//         // ID du post\r\n//         // console.log(this.props.post_id);\r\n\r\n//         const url = `http://localhost:8080/api/articles/${this.props.post_id}/comments`;\r\n//         const reqOptions = {\r\n//             method: \"GET\",\r\n//             headers: {\r\n//                 Authorization: `Bearer ${token}`,\r\n//                 Accept: \"application/json\",\r\n//                 \"Content-Type\": \"application/json\",\r\n//             },\r\n//         };\r\n\r\n//         try {\r\n//             const res = await fetch(url, reqOptions);\r\n//             const data = await res.json();\r\n\r\n//             // console.log(data);\r\n\r\n//             if (data.allComments) {\r\n//                 // console.log(data.allComments);\r\n//                 this.setState({ comments: data.allComments, message: \"Commentaires chargé\", DataIsLoaded: true });\r\n//             }\r\n//             console.log(this.state);\r\n\r\n//             // this.setState({ comments: data.allComments, DataIsLoaded: true });\r\n//             // console.log(this.state);\r\n//             // console.log(data);\r\n//         } catch (err) {\r\n//             console.log(err);\r\n//         }\r\n//     }\r\n\r\n//     render() {\r\n//         const { DataIsLoaded, comments, message } = this.state;\r\n\r\n//         if (!DataIsLoaded)\r\n//             return (\r\n//                 <div>\r\n//                     <h1> {message} </h1>\r\n//                 </div>\r\n//             );\r\n\r\n//         // console.log(comments);\r\n\r\n//         // const showComments = comments.map((comment) => {\r\n//         //     // return <div key={comment.id}>HELLO</div>;\r\n//         // });\r\n\r\n//         return <div>{!DataIsLoaded ? \"Pas de commentaires\" : message}</div>;\r\n//     }\r\n// }\r\n\r\nfunction Comments(props) {\r\n    const { post_id } = props;\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [comments, setComments] = useState([]);\r\n    const [dataIsLoaded, setDataIsLoaded] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    // Token de l'utilisateur\r\n    const user = JSON.parse(sessionStorage.getItem(\"isAuthenticate\"));\r\n    const token = user.pass;\r\n    const user_id = user.id;\r\n\r\n    // Request Options\r\n    const url = `http://localhost:8080/api/articles/${post_id}/comments`;\r\n    const reqOptions = {\r\n        method: \"GET\",\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    const fetchComments = () => {\r\n        fetch(url, reqOptions)\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n            })\r\n            .then((data) => {\r\n                // console.log(data);\r\n                if (!data) {\r\n                    setMsg(\"Aucun commentaire\");\r\n                    // console.log(msg);\r\n                }\r\n                setComments(data);\r\n                setDataIsLoaded(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n    }, []);\r\n\r\n    if (!dataIsLoaded)\r\n        return (\r\n            <div>\r\n                <h1> {msg} </h1>\r\n            </div>\r\n        );\r\n\r\n    // if (comments.allComments == undefined) {\r\n    //     console.log(\"pas de commentaire\");\r\n    // }\r\n\r\n    console.log(comments);\r\n\r\n    const showComs = comments.allComments?.map((comment) => {\r\n        if (comment) {\r\n            return <div>Yes y'a des coms</div>;\r\n        } else {\r\n            return <div>No comments</div>;\r\n        }\r\n    });\r\n\r\n    const handleClick = (e) => {\r\n        setShow(true);\r\n    };\r\n\r\n    return <div>{showComs}</div>;\r\n    // return <div>{!comments ? \"Pas de commentaires à afficher\" : \"fuck toi\"}</div>;\r\n}\r\n\r\nexport default Comments;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}