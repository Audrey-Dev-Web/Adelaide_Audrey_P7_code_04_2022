{"ast":null,"code":"var _jsxFileName = \"F:\\\\Works\\\\Formation OC\\\\SOUTENANCES\\\\P7\\\\groupomania\\\\client\\\\src\\\\components\\\\comments\\\\DeleteComment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { BiTrash } from \"react-icons/bi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeleteComment(props) {\n  _s();\n\n  // On récupère l'id de l'utilisateur avec props\n  const {\n    post_id,\n    author_id,\n    comment_id,\n    access\n  } = props; // useState pour stocker le boolean si oui ou non l'utilisateur est autorisé à supprimer\n\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [error, setError] = useState(false);\n  const token = access;\n  const decoded = jwt_decode(token);\n  const user_id = decoded.userId;\n  const user_role = decoded.role; // On prépare la requête delete\n\n  const url = `http://localhost:8080/api/articles/${post_id}/comments/${comment_id}`;\n  const reqOptions = {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  }; // On vérifi si l'utilisateur est autorisé à supprimer le commentaire\n\n  const authorization = async () => {\n    if (user_id === author_id || user_role === \"admin\") {\n      setIsAuthorized(true);\n    }\n  };\n\n  useEffect(() => {\n    authorization();\n  }, []);\n\n  const deleteComment = async e => {\n    try {\n      let res = await fetch(url, reqOptions);\n      let commentRes = await res.json();\n      window.location.reload();\n    } catch (err) {\n      setErrorMsg(err);\n      setError(true);\n      setTimeout(function () {\n        setErrorMsg(null);\n        setError(false);\n      }, 3000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isAuthorized ? null : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"comments__delete--btn btn\",\n      onClick: () => {\n        const confirmBox = window.confirm(\"Voulez vous vraiment supprimer ce commentaire ?\");\n\n        if (confirmBox === true) {\n          deleteComment();\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        hidden: true,\n        children: \"Supprimer le commentaire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(BiTrash, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeleteComment, \"KFEFmMaqLrdJ1WsEbCUh0xugGmY=\");\n\n_c = DeleteComment;\nexport default DeleteComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteComment\");","map":{"version":3,"names":["React","useState","useEffect","jwt_decode","BiTrash","DeleteComment","props","post_id","author_id","comment_id","access","isAuthorized","setIsAuthorized","errorMsg","setErrorMsg","error","setError","token","decoded","user_id","userId","user_role","role","url","reqOptions","method","headers","Authorization","Accept","authorization","deleteComment","e","res","fetch","commentRes","json","window","location","reload","err","setTimeout","confirmBox","confirm"],"sources":["F:/Works/Formation OC/SOUTENANCES/P7/groupomania/client/src/components/comments/DeleteComment.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { BiTrash } from \"react-icons/bi\";\r\n\r\nfunction DeleteComment(props) {\r\n    // On récupère l'id de l'utilisateur avec props\r\n    const { post_id, author_id, comment_id, access } = props;\r\n\r\n    // useState pour stocker le boolean si oui ou non l'utilisateur est autorisé à supprimer\r\n    const [isAuthorized, setIsAuthorized] = useState(false);\r\n\r\n    const [errorMsg, setErrorMsg] = useState(null);\r\n    const [error, setError] = useState(false);\r\n\r\n    const token = access;\r\n    const decoded = jwt_decode(token);\r\n    const user_id = decoded.userId;\r\n    const user_role = decoded.role;\r\n\r\n    // On prépare la requête delete\r\n    const url = `http://localhost:8080/api/articles/${post_id}/comments/${comment_id}`;\r\n    const reqOptions = {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    // On vérifi si l'utilisateur est autorisé à supprimer le commentaire\r\n    const authorization = async () => {\r\n        if (user_id === author_id || user_role === \"admin\") {\r\n            setIsAuthorized(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        authorization();\r\n    }, []);\r\n\r\n    const deleteComment = async (e) => {\r\n        try {\r\n            let res = await fetch(url, reqOptions);\r\n            let commentRes = await res.json();\r\n\r\n            window.location.reload();\r\n        } catch (err) {\r\n            setErrorMsg(err);\r\n            setError(true);\r\n            setTimeout(function () {\r\n                setErrorMsg(null);\r\n                setError(false);\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!isAuthorized ? null : (\r\n                <button\r\n                    className=\"comments__delete--btn btn\"\r\n                    onClick={() => {\r\n                        const confirmBox = window.confirm(\"Voulez vous vraiment supprimer ce commentaire ?\");\r\n\r\n                        if (confirmBox === true) {\r\n                            deleteComment();\r\n                        }\r\n                    }}\r\n                >\r\n                    <p hidden>Supprimer le commentaire</p>\r\n                    <BiTrash />\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteComment;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAAA;;EAC1B;EACA,MAAM;IAAEC,OAAF;IAAWC,SAAX;IAAsBC,UAAtB;IAAkCC;EAAlC,IAA6CJ,KAAnD,CAF0B,CAI1B;;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;EAEA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,KAAD,CAAlC;EAEA,MAAMgB,KAAK,GAAGP,MAAd;EACA,MAAMQ,OAAO,GAAGf,UAAU,CAACc,KAAD,CAA1B;EACA,MAAME,OAAO,GAAGD,OAAO,CAACE,MAAxB;EACA,MAAMC,SAAS,GAAGH,OAAO,CAACI,IAA1B,CAb0B,CAe1B;;EACA,MAAMC,GAAG,GAAI,sCAAqChB,OAAQ,aAAYE,UAAW,EAAjF;EACA,MAAMe,UAAU,GAAG;IACfC,MAAM,EAAE,QADO;IAEfC,OAAO,EAAE;MACLC,aAAa,EAAG,UAASV,KAAM,EAD1B;MAELW,MAAM,EAAE,kBAFH;MAGL,gBAAgB;IAHX;EAFM,CAAnB,CAjB0B,CA0B1B;;EACA,MAAMC,aAAa,GAAG,YAAY;IAC9B,IAAIV,OAAO,KAAKX,SAAZ,IAAyBa,SAAS,KAAK,OAA3C,EAAoD;MAChDT,eAAe,CAAC,IAAD,CAAf;IACH;EACJ,CAJD;;EAMAV,SAAS,CAAC,MAAM;IACZ2B,aAAa;EAChB,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAMC,aAAa,GAAG,MAAOC,CAAP,IAAa;IAC/B,IAAI;MACA,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAD,EAAMC,UAAN,CAArB;MACA,IAAIU,UAAU,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAvB;MAEAC,MAAM,CAACC,QAAP,CAAgBC,MAAhB;IACH,CALD,CAKE,OAAOC,GAAP,EAAY;MACVzB,WAAW,CAACyB,GAAD,CAAX;MACAvB,QAAQ,CAAC,IAAD,CAAR;MACAwB,UAAU,CAAC,YAAY;QACnB1B,WAAW,CAAC,IAAD,CAAX;QACAE,QAAQ,CAAC,KAAD,CAAR;MACH,CAHS,EAGP,IAHO,CAAV;IAIH;EACJ,CAdD;;EAgBA,oBACI;IAAA,UACK,CAACL,YAAD,GAAgB,IAAhB,gBACG;MACI,SAAS,EAAC,2BADd;MAEI,OAAO,EAAE,MAAM;QACX,MAAM8B,UAAU,GAAGL,MAAM,CAACM,OAAP,CAAe,iDAAf,CAAnB;;QAEA,IAAID,UAAU,KAAK,IAAnB,EAAyB;UACrBX,aAAa;QAChB;MACJ,CARL;MAAA,wBAUI;QAAG,MAAM,MAAT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ,eAWI,QAAC,OAAD;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA;EAFR;IAAA;IAAA;IAAA;EAAA,QADJ;AAmBH;;GAxEQzB,a;;KAAAA,a;AA0ET,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}