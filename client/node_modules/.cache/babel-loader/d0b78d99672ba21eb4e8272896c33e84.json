{"ast":null,"code":"var _jsxFileName = \"F:\\\\Works\\\\Formation OC\\\\SOUTENANCES\\\\P7\\\\groupomania\\\\client\\\\src\\\\components\\\\DateTime.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DateTime(props) {\n  const {\n    datetime\n  } = props; // const get_date = new Date(datetime).getDate();\n  // const get_month = new Date(datetime).getMonth() + 1; // On ajoute +1 afin de compenser la perte de 1 moi durant la convertion\n  // const get_year = new Date(datetime).getFullYear();\n  // const date = `${get_year}, ${get_month}, ${get_date}`;\n\n  const now = new Date();\n  const date = new Date(datetime); // const timeBetween = now - date;\n\n  const unAutreTest = now - date;\n  const jours = unAutreTest / (1000 * 3600 * 24);\n  console.log(jours); // console.log(now);\n  // const test = now - otherDate;\n  // console.log(test.toString());\n  // const time = new Date(test);\n  // console.log(time);\n\n  var diff = {}; // Initialisation du retour\n\n  function dateDiff(date1, date2) {\n    var tmp = date2 - date1;\n    tmp = Math.floor(tmp / 1000); // Nombre de secondes entre les 2 dates\n\n    diff.sec = tmp % 60; // Extraction du nombre de secondes\n\n    tmp = Math.floor((tmp - diff.sec) / 60); // Nombre de minutes (partie entière)\n\n    diff.min = tmp % 60; // Extraction du nombre de minutes\n\n    tmp = Math.floor((tmp - diff.min) / 60); // Nombre d'heures (entières)\n\n    diff.hour = tmp % 24; // Extraction du nombre d'heures\n\n    tmp = Math.floor((tmp - diff.hour) / 24); // Nombre de jours restants\n\n    diff.day = tmp;\n    return diff;\n  }\n\n  diff = dateDiff(date, now);\n  console.log(`Entre le ${date.toString()} et ${now.toString} il y a ${diff.day} jours, ${diff.hour} heures, ${diff.sec} secondes /  ${diff}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"DateTime : \", jours]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 12\n  }, this);\n}\n\n_c = DateTime;\nexport default DateTime;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateTime\");","map":{"version":3,"names":["React","DateTime","props","datetime","now","Date","date","unAutreTest","jours","console","log","diff","dateDiff","date1","date2","tmp","Math","floor","sec","min","hour","day","toString"],"sources":["F:/Works/Formation OC/SOUTENANCES/P7/groupomania/client/src/components/DateTime.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction DateTime(props) {\r\n    const { datetime } = props;\r\n\r\n    // const get_date = new Date(datetime).getDate();\r\n    // const get_month = new Date(datetime).getMonth() + 1; // On ajoute +1 afin de compenser la perte de 1 moi durant la convertion\r\n    // const get_year = new Date(datetime).getFullYear();\r\n\r\n    // const date = `${get_year}, ${get_month}, ${get_date}`;\r\n    const now = new Date();\r\n    const date = new Date(datetime);\r\n    // const timeBetween = now - date;\r\n\r\n    const unAutreTest = now - date;\r\n    const jours = unAutreTest / (1000 * 3600 * 24);\r\n\r\n    console.log(jours);\r\n    // console.log(now);\r\n\r\n    // const test = now - otherDate;\r\n    // console.log(test.toString());\r\n\r\n    // const time = new Date(test);\r\n    // console.log(time);\r\n\r\n    var diff = {}; // Initialisation du retour\r\n\r\n    function dateDiff(date1, date2) {\r\n        var tmp = date2 - date1;\r\n\r\n        tmp = Math.floor(tmp / 1000); // Nombre de secondes entre les 2 dates\r\n        diff.sec = tmp % 60; // Extraction du nombre de secondes\r\n\r\n        tmp = Math.floor((tmp - diff.sec) / 60); // Nombre de minutes (partie entière)\r\n        diff.min = tmp % 60; // Extraction du nombre de minutes\r\n\r\n        tmp = Math.floor((tmp - diff.min) / 60); // Nombre d'heures (entières)\r\n        diff.hour = tmp % 24; // Extraction du nombre d'heures\r\n\r\n        tmp = Math.floor((tmp - diff.hour) / 24); // Nombre de jours restants\r\n        diff.day = tmp;\r\n\r\n        return diff;\r\n    }\r\n\r\n    diff = dateDiff(date, now);\r\n\r\n    console.log(\r\n        `Entre le ${date.toString()} et ${now.toString} il y a ${diff.day} jours, ${diff.hour} heures, ${\r\n            diff.sec\r\n        } secondes /  ${diff}`\r\n    );\r\n\r\n    return <div>DateTime : {jours}</div>;\r\n}\r\n\r\nexport default DateTime;\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EACrB,MAAM;IAAEC;EAAF,IAAeD,KAArB,CADqB,CAGrB;EACA;EACA;EAEA;;EACA,MAAME,GAAG,GAAG,IAAIC,IAAJ,EAAZ;EACA,MAAMC,IAAI,GAAG,IAAID,IAAJ,CAASF,QAAT,CAAb,CATqB,CAUrB;;EAEA,MAAMI,WAAW,GAAGH,GAAG,GAAGE,IAA1B;EACA,MAAME,KAAK,GAAGD,WAAW,IAAI,OAAO,IAAP,GAAc,EAAlB,CAAzB;EAEAE,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAfqB,CAgBrB;EAEA;EACA;EAEA;EACA;;EAEA,IAAIG,IAAI,GAAG,EAAX,CAxBqB,CAwBN;;EAEf,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;IAC5B,IAAIC,GAAG,GAAGD,KAAK,GAAGD,KAAlB;IAEAE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,IAAjB,CAAN,CAH4B,CAGE;;IAC9BJ,IAAI,CAACO,GAAL,GAAWH,GAAG,GAAG,EAAjB,CAJ4B,CAIP;;IAErBA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAAGJ,IAAI,CAACO,GAAZ,IAAmB,EAA9B,CAAN,CAN4B,CAMa;;IACzCP,IAAI,CAACQ,GAAL,GAAWJ,GAAG,GAAG,EAAjB,CAP4B,CAOP;;IAErBA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAAGJ,IAAI,CAACQ,GAAZ,IAAmB,EAA9B,CAAN,CAT4B,CASa;;IACzCR,IAAI,CAACS,IAAL,GAAYL,GAAG,GAAG,EAAlB,CAV4B,CAUN;;IAEtBA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACF,GAAG,GAAGJ,IAAI,CAACS,IAAZ,IAAoB,EAA/B,CAAN,CAZ4B,CAYc;;IAC1CT,IAAI,CAACU,GAAL,GAAWN,GAAX;IAEA,OAAOJ,IAAP;EACH;;EAEDA,IAAI,GAAGC,QAAQ,CAACN,IAAD,EAAOF,GAAP,CAAf;EAEAK,OAAO,CAACC,GAAR,CACK,YAAWJ,IAAI,CAACgB,QAAL,EAAgB,OAAMlB,GAAG,CAACkB,QAAS,WAAUX,IAAI,CAACU,GAAI,WAAUV,IAAI,CAACS,IAAK,YAClFT,IAAI,CAACO,GACR,gBAAeP,IAAK,EAHzB;EAMA,oBAAO;IAAA,0BAAiBH,KAAjB;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACH;;KArDQP,Q;AAuDT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}